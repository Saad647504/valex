generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String
  lastName    String
  password    String
  avatar      String?
  role        Role     @default(MEMBER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownedProjects    Project[]     @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  assignedTasks    Task[]        @relation("TaskAssignee")
  createdTasks     Task[]        @relation("TaskCreator")
  comments         Comment[]
  timeEntries      TimeEntry[]
  focusSessions    FocusSession[]
  notes           Note[]
  notifications   Notification[]
  sentInvitations ProjectInvitation[]
  receivedInvitations ProjectInvitation[] @relation("InvitationInvitee")
  colleagueRelations  ColleagueRelation[] @relation("ColleagueFrom")
  colleagueOf         ColleagueRelation[] @relation("ColleagueTo")

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  key         String   @unique
  color       String   @default("#3B82F6")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId     String
  members     ProjectMember[]
  columns     Column[]
  tasks       Task[]
  focusSessions FocusSession[]
  notes       Note[]
  invitations ProjectInvitation[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("project_members")
}

model Column {
  id        String  @id @default(cuid())
  name      String
  position  Int
  color     String  @default("#6B7280")
  isDefault Boolean @default(false)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]

  @@map("columns")
}

model Task {
  id              String     @id @default(cuid())
  title           String
  description     String?
  key             String     @unique
  status          TaskStatus @default(TODO)
  priority        Priority   @default(MEDIUM)
  position        Float
  estimatedMinutes Int?       // Estimated time in minutes for focus sessions
  aiInsights      String? 
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  dueDate         DateTime?
  completedAt     DateTime?

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  column      Column      @relation(fields: [columnId], references: [id])
  columnId    String
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  creator     User        @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  
  comments    Comment[]
  timeEntries TimeEntry[]
  focusSessions FocusSession[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("comments")
}

model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  createdAt   DateTime  @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("time_entries")
}

model FocusSession {
  id             String           @id @default(cuid())
  duration       Int              // Duration in seconds
  actualDuration Int?             // Actual time spent in seconds
  sessionType    SessionType      @default(FOCUS)
  status         SessionStatus    @default(ACTIVE)
  notes          String?
  startedAt      DateTime         @default(now())
  endedAt        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  project        Project?         @relation(fields: [projectId], references: [id])
  projectId      String?
  task           Task?            @relation(fields: [taskId], references: [id])
  taskId         String?

  @@map("focus_sessions")
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String
  color       String   @default("#1e293b")
  tags        String[] @default([])
  isPinned    Boolean  @default(false)
  isStarred   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?

  @@map("notes")
}

model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  data        Json?             // Flexible data for different notification types
  isRead      Boolean           @default(false)
  createdAt   DateTime          @default(now())
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  @@map("notifications")
}

model ProjectInvitation {
  id          String            @id @default(cuid())
  email       String
  role        ProjectRole       @default(MEMBER)
  status      InvitationStatus  @default(PENDING)
  token       String            @unique
  expiresAt   DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  inviter     User              @relation(fields: [inviterId], references: [id])
  inviterId   String
  invitee     User?             @relation("InvitationInvitee", fields: [inviteeId], references: [id])
  inviteeId   String?

  @@map("project_invitations")
}

model ColleagueRelation {
  id          String                @id @default(cuid())
  status      ColleagueStatus       @default(ACTIVE)
  connectedAt DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  
  fromUser    User                  @relation("ColleagueFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId  String
  toUser      User                  @relation("ColleagueTo", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId    String
  
  @@unique([fromUserId, toUserId])
  @@map("colleague_relations")
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SessionType {
  FOCUS
  BREAK
  LONG_BREAK
}

enum SessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  INTERRUPTED
}

enum NotificationType {
  TEAM_INVITE
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATED
  SESSION_COMPLETED
  AI_INSIGHT
  SYSTEM
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ColleagueStatus {
  ACTIVE
  BLOCKED
}